name: CI on ECR

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: ap-northeast-2
  REPO_PREFIX: backend-service

jobs:
  build-all:
    runs-on: ubuntu-24.04-arm

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push all top-level folders
        env:
          REGISTRY: ${{ steps.ecr.outputs.registry }}
        shell: bash
        run: |
          set -euo pipefail

          IMAGE_TAG=$(date -u +"%Y%m%dT%H%M%SZ")
          echo "IMAGE_TAG=${IMAGE_TAG}"

          # 레포 루트의 1-depth 폴더 수집
          mapfile -t FOLDERS < <(find . -maxdepth 1 -mindepth 1 -type d -printf '%P\n' \
                                  | grep -Ev '^\.(git|github|vscode)$' || true)
          echo "Top-level dirs: ${FOLDERS[*]:-<none>}"

          if [ ${#FOLDERS[@]} -eq 0 ]; then
            echo "No top-level folders found. Nothing to do."
            exit 0
          fi

          for dir in "${FOLDERS[@]}"; do
            # Dockerfile 경로 탐색 (대/소문자 모두 허용)
            if   [ -f "$dir/Dockerfile" ]; then DOCKERFILE="$dir/Dockerfile"
            elif [ -f "$dir/dockerfile" ]; then DOCKERFILE="$dir/dockerfile"
            else
              echo "Skip $dir (no Dockerfile/dockerfile)"
              continue
            fi

            repo_name="${REPO_PREFIX}/${dir}"
            echo "=== Building folder: $dir (Dockerfile: $DOCKERFILE) -> ECR repo: ${repo_name}"

            # 리포 없으면 생성
            aws ecr describe-repositories --repository-names "${repo_name}" --region "${AWS_REGION}" >/dev/null 2>&1 \
              || aws ecr create-repository --repository-name "${repo_name}" --region "${AWS_REGION}"

            # 빌드 (-f로 명시)
            docker build -f "$DOCKERFILE" -t "${REGISTRY}/${repo_name}:latest" -t "${REGISTRY}/${repo_name}:${IMAGE_TAG}" "$dir"

            # 푸시
            docker push "${REGISTRY}/${repo_name}:latest"
            docker push "${REGISTRY}/${repo_name}:${IMAGE_TAG}"
            echo "Pushed: ${REGISTRY}/${repo_name}:latest, ${REGISTRY}/${repo_name}:${IMAGE_TAG}"
          done
