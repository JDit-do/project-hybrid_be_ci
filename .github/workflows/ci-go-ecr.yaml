name: CI on ECR

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-northeast-2
  REPO_PREFIX: backend-service

jobs:
  build-all:
    runs-on: ubuntu-24.04-arm

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push all top-level folders
        env:
          REGISTRY: ${{ steps.ecr.outputs.registry }}
          # workflow_dispatch로 수동 실행 시, 'minor' 입력을 받을 수 있게 추가.
          # GitHub UI에서 입력 받아 'on.workflow_dispatch.inputs.minor'를 정의.
          INPUT_MINOR: ${{ github.event.inputs.minor }} # 비어있으면 자동
          DEFAULT_MAJOR: "1"
          ALLOW_CREATE: "true"
        shell: bash
        run: |
          set -euo pipefail

          NOW_TS=$(date -u +"%Y%m%dT%H%M%SZ")
          echo "CURRENT UTC: ${NOW_TS}"

          # 루트의 1-depth 폴더 수집
          mapfile -t FOLDERS < <(find . -maxdepth 1 -mindepth 1 -type d -printf '%P\n' \
                                  | grep -Ev '^\.(git|github|vscode)$' || true)
          echo "Top-level dirs: ${FOLDERS[*]:-<none>}"
          if [ ${#FOLDERS[@]} -eq 0 ]; then
            echo "No top-level folders found. Nothing to do."
            exit 0
          fi

          ensure_repo() {
            local repo="$1"
            # 존재하면 OK
            if aws ecr describe-repositories --repository-names "$repo" --region "${AWS_REGION}" >/dev/null 2>&1; then
              echo "ECR repo exists: $repo"
              return 0
            fi
            # 존재하지 않고 생성 금지면 스킵
            if [ "${ALLOW_CREATE}" != "true" ]; then
              echo "ECR repo missing and creation disabled: $repo (skip build)"
              return 1
            fi
            # 생성 시도 (권한 없거나 이미 경쟁 생성이면 에러 무시)
            echo "Creating ECR repo: $repo"
            if ! aws ecr create-repository --repository-name "$repo" --region "${AWS_REGION}" >/dev/null 2>&1; then
              # 두 경우를 허용:
              # - RepositoryAlreadyExistsException (경쟁 생성)
              # - AccessDeniedException (권한 없음) → 스킵
              if aws ecr describe-repositories --repository-names "$repo" --region "${AWS_REGION}" >/dev/null 2>&1; then
                echo "Repo became available after create attempt: $repo"
                return 0
              else
                echo "WARN: cannot create or find repo: $repo (likely missing ecr:CreateRepository permission). Skip."
                return 1
              fi
            fi
            echo "Created ECR repo: $repo"
            return 0
          }

          for dir in "${FOLDERS[@]}"; do
            # Dockerfile 경로(대/소문자 허용)
            if   [ -f "$dir/Dockerfile" ]; then DOCKERFILE="$dir/Dockerfile"
            elif [ -f "$dir/dockerfile" ]; then DOCKERFILE="$dir/dockerfile"
            else
              echo "Skip $dir (no Dockerfile/dockerfile)"
              continue
            fi

            repo_name="${REPO_PREFIX}/${dir}"  # 예: backend-service/testgo
            echo "=== Processing: $dir (Dockerfile: $DOCKERFILE) -> ECR repo: ${repo_name}"

            # 0) 리포 확인/생성(필요 시)
            if ! ensure_repo "$repo_name"; then
              echo "Skip $dir due to repo readiness failure."
              continue
            fi

            # 1) 기존 semver 태그 모으기 (vX.Y.Z)
            EXISTING=$(
              aws ecr describe-images \
                --repository-name "${repo_name}" \
                --query "imageDetails[].imageTags[]" \
                --output text 2>/dev/null | tr '\t' '\n' | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' || true
            )

            # 2) major/minor 결정
            MAJOR="${DEFAULT_MAJOR}"
            if [ -n "${INPUT_MINOR:-}" ]; then
              if ! [[ "${INPUT_MINOR}" =~ ^[0-9]+$ ]]; then
                echo "Invalid INPUT_MINOR='${INPUT_MINOR}'. Must be integer." >&2
                exit 1
              fi
              MINOR="${INPUT_MINOR}"
            else
              if [ -n "${EXISTING}" ]; then
                MINOR=$(printf '%s\n' ${EXISTING} \
                  | awk -F'[v\\.]' -v maj="${MAJOR}" '$2==maj {print $3}' \
                  | sort -n | tail -n1)
                [ -z "${MINOR:-}" ] && MINOR="0"
              else
                MINOR="0"
              fi
            fi

            # 3) patch +1
            if [ -n "${EXISTING}" ]; then
              PATCH_MAX=$(printf '%s\n' ${EXISTING} \
                | awk -F'[v\\.]' -v maj="${MAJOR}" -v min="${MINOR}" '$2==maj && $3==min {print $4}' \
                | sort -n | tail -n1)
              PATCH=$([ -z "${PATCH_MAX:-}" ] && echo 0 || echo $((PATCH_MAX + 1)))
            else
              PATCH="0"
            fi
            VERSION_TAG="v${MAJOR}.${MINOR}.${PATCH}"
            echo "Resolved version for ${repo_name}: ${VERSION_TAG}"

            # 4) 빌드 & 태깅
            docker build -f "$DOCKERFILE" \
              -t "${REGISTRY}/${repo_name}:latest" \
              -t "${REGISTRY}/${repo_name}:${VERSION_TAG}" \
              "$dir"

            # 5) 푸시
            docker push "${REGISTRY}/${repo_name}:${VERSION_TAG}"
            docker push "${REGISTRY}/${repo_name}:latest"

            echo "Pushed: ${REGISTRY}/${repo_name}:${VERSION_TAG} and :latest"
          done
